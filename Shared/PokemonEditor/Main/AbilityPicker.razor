@using PKHeX.Core
@using PKHeX.Core.Editing
@using PKHeX.Core.Game
@using PKHeX.Core.PKM
@using PKHeX.Core.Util
@using PKHeX.Core.Saves
@using PKHeX.Core.Resources
@using PKHeX.Core.PersonalInfo

@inject PkmEdit PE
@inject SavEdit SE

@if (SE.SAV.Generation >= 3)
{
  var abilityList = GameInfo.FilteredSources.GetAbilityList(PE.PKM);

  <MudSelect T="int" Value="@GetIndex()" ValueChanged="SetAbility" Label="Ability"
  ToStringFunc="@(e => abilityList[e].Text)" AnchorOrigin="Origin.BottomCenter" Margin="Margin.Dense" Dense>
  @foreach (var (ability, index) in abilityList.Select((ability, index) => (ability, index)))
    {
      <MudSelectItem Value="index" />
    }
    </MudSelect>
}

@code {
  protected override void OnInitialized()
  {
    PE.OnChange += StateHasChanged;
  }

  protected void SetAbility(int abilityIndex)
  {
    PE.PKM.SetAbilityIndex(abilityIndex);
    PE.NotifyDataChanged();
  }

  protected int GetIndex()
  {
    var abilityList = GameInfo.FilteredSources.GetAbilityList(PE.PKM);
    var abilityCount = abilityList.Count;

    return PE.PKM switch
    {
      G3PKM pk3 => pk3.AbilityBit && abilityCount > 1 ? 1 : 0,
      G4PKM pk4 => LoadAbility4(pk4, abilityCount),
      PK5 pk5 => pk5.HiddenAbility ? abilityCount - 1 : LoadAbility4(pk5, abilityCount),
      _ => GetAbilityIndex6(PE.PKM, abilityCount)
    };
  }

  private int LoadAbility4(PKM pk, int abilityCount)
  {
    var index = GetAbilityIndex4(pk);
    return Math.Min(abilityCount, index);
  }

  private int GetAbilityIndex4(PKM pk)
  {
    var pi = pk.PersonalInfo;
    int abilityIndex = pi.GetAbilityIndex(pk.Ability);
    if (abilityIndex < 0)
      return 0;
    if (abilityIndex >= 2)
      return 2;

    var abils = pi.Abilities;
    if (abils[0] == abils[1])
      return pk.PIDAbility;
    return abilityIndex;
  }

  private int GetAbilityIndex6(PKM pk, int abilityCount)
  {
    var bitNumber = pk.AbilityNumber;
    int abilityIndex = AbilityVerifier.IsValidAbilityBits(bitNumber) ? bitNumber >> 1 : 0;
    if (abilityIndex >= abilityCount)
      abilityIndex = abilityCount - 1;

    return abilityIndex;
  }
}
